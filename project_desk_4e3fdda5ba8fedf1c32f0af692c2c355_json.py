# -*- coding: utf-8 -*-
"""project-desk-4e3fdda5ba8fedf1c32f0af692c2c355.json

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Fjs0oOX97KIOwWJp3w7kJCBNFDs7Ycij
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline

df = pd.read_csv('/content/project-desk-04d7143450ea553373b099d30c542ca8.csv')
df.head()

X = df.drop('V116', axis=1)
y = df['V116']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

pipeline = Pipeline([
    ('smote', SMOTE(sampling_strategy='auto', random_state=42)),
    ('rus', RandomUnderSampler(sampling_strategy='auto', random_state=42))
])

X_resampled, y_resampled = pipeline.fit_resample(X_train, y_train)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from imblearn.combine import SMOTETomek
from imblearn.under_sampling import RandomUnderSampler
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
data = pd.read_csv('/content/nomao.csv')

# Step 1: Homogeneous Data Split
X = data.drop('V116', axis=1)
y = data['V116']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 2: Using SMOTE
smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

# Step 3: Using SMOTE in Both Classes (Innovative Approach)
smote_tomek = SMOTETomek(random_state=42)
X_train_smote_tomek, y_train_smote_tomek = smote_tomek.fit_resample(X_train, y_train)

# Step 4: Combining SMOTE with RUS (Random Undersampling)
rus = RandomUnderSampler(random_state=42)
X_train_rus, y_train_rus = rus.fit_resample(X_train, y_train)

from sklearn.ensemble import RandomForestClassifier
# Define and train the classifier on the original dataset
clf_original = RandomForestClassifier(random_state=42)
clf_original.fit(X_train, y_train)

# Define and train the classifier on the SMOTE dataset
clf_smote = RandomForestClassifier(random_state=42)
clf_smote.fit(X_train_smote, y_train_smote)

# Define and train the classifier on the SMOTE Tomek dataset
clf_smote_tomek = RandomForestClassifier(random_state=42)
clf_smote_tomek.fit(X_train_smote_tomek, y_train_smote_tomek)

# Define and train the classifier on the RUS dataset
clf_rus = RandomForestClassifier(random_state=42)
clf_rus.fit(X_train_rus, y_train_rus)

# Step 5: Evaluate the models on your test set and compare their performance
y_pred_original = clf_original.predict(X_test)
accuracy_original = accuracy_score(y_test, y_pred_original)

y_pred_smote = clf_smote.predict(X_test)
accuracy_smote = accuracy_score(y_test, y_pred_smote)

y_pred_smote_tomek = clf_smote_tomek.predict(X_test)
accuracy_smote_tomek = accuracy_score(y_test, y_pred_smote_tomek)

y_pred_rus = clf_rus.predict(X_test)
accuracy_rus = accuracy_score(y_test, y_pred_rus)

# Step 6: Evaluate the models and plot confusion matrices
def evaluate_and_plot_confusion_matrix(y_true, y_pred, model_name):
    # Calculate confusion matrix
    cm = confusion_matrix(y_true, y_pred)

    # Plot confusion matrix heatmap using Seaborn
    plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues", cbar=False)
    plt.xlabel('Predicted Labels')
    plt.ylabel('True Labels')
    plt.title(f'Confusion Matrix for {model_name}')
    plt.show()

evaluate_and_plot_confusion_matrix(y_test, y_pred_original, "Original Dataset")
print(f"Accuracy (Original Dataset): {accuracy_original:.2f}")

evaluate_and_plot_confusion_matrix(y_test, y_pred_smote, "SMOTE Dataset")
print(f"Accuracy (SMOTE Dataset): {accuracy_smote:.2f}")

evaluate_and_plot_confusion_matrix(y_test, y_pred_smote_tomek, "SMOTE Tomek Dataset")
print(f"Accuracy (SMOTE Tomek Dataset): {accuracy_smote_tomek:.2f}")

evaluate_and_plot_confusion_matrix(y_test, y_pred_rus, "RUS Dataset")
print(f"Accuracy (RUS Dataset): {accuracy_rus:.2f}")

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from imblearn.combine import SMOTETomek
from imblearn.under_sampling import RandomUnderSampler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

data = pd.read_csv('/content/nomao.csv')

# Step 1: Homogeneous Data Split
X = data.drop('V116', axis=1)
y = data['V116']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 2: Using SMOTE
smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

# Step 3: Using SMOTE in Both Classes (Innovative Approach)
smote_tomek = SMOTETomek(random_state=42)
X_train_smote_tomek, y_train_smote_tomek = smote_tomek.fit_resample(X_train, y_train)

# Step 4: Combining SMOTE with RUS (Random Undersampling)
rus = RandomUnderSampler(random_state=42)
X_train_rus, y_train_rus = rus.fit_resample(X_train, y_train)
# Define and train the regressor on the original dataset
reg_original = RandomForestRegressor(random_state=42)
reg_original.fit(X_train, y_train)

# Define and train the regressor on the SMOTE dataset
reg_smote = RandomForestRegressor(random_state=42)
reg_smote.fit(X_train_smote, y_train_smote)

# Define and train the regressor on the SMOTE Tomek dataset
reg_smote_tomek = RandomForestRegressor(random_state=42)
reg_smote_tomek.fit(X_train_smote_tomek, y_train_smote_tomek)

# Define and train the regressor on the RUS dataset
reg_rus = RandomForestRegressor(random_state=42)
reg_rus.fit(X_train_rus, y_train_rus)

# Step 5: Evaluate the models on your test set and compare their performance
y_pred_original = reg_original.predict(X_test)
mse_original = mean_squared_error(y_test, y_pred_original)

y_pred_smote = reg_smote.predict(X_test)
mse_smote = mean_squared_error(y_test, y_pred_smote)

y_pred_smote_tomek = reg_smote_tomek.predict(X_test)
mse_smote_tomek = mean_squared_error(y_test, y_pred_smote_tomek)

y_pred_rus = reg_rus.predict(X_test)
mse_rus = mean_squared_error(y_test, y_pred_rus)

print("Mean Squared Error - Original:", mse_original)
print("Mean Squared Error - SMOTE:", mse_smote)
print("Mean Squared Error - SMOTE Tomek:", mse_smote_tomek)
print("Mean Squared Error - RUS:", mse_rus)